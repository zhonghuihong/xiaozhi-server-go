name: Build Go binary

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Install cross-compilation tools
        run: |
          sudo apt update
          sudo apt install -y mingw-w64 pkg-config build-essential git wget

      - name: Download and build libopus (static)
        run: |
          OPUS_VERSION=1.31
          wget https://archive.mozilla.org/pub/opus/opus-${OPUS_VERSION}.tar.gz
          tar -xzf opus-${OPUS_VERSION}.tar.gz
          cd opus-${OPUS_VERSION}
          ./configure --host=x86_64-w64-mingw32 --disable-shared --enable-static --prefix=$HOME/opus-win
          make -j$(nproc)
          make install

      - name: Set environment for cross-compilation
        run: |
          echo "PKG_CONFIG_PATH=$HOME/opus-win/lib/pkgconfig" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "GOOS=windows" >> $GITHUB_ENV
          echo "GOARCH=amd64" >> $GITHUB_ENV
          echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV

      - name: Build Go binary for Windows
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
          GOOS: ${{ env.GOOS }}
          GOARCH: ${{ env.GOARCH }}
          CC: ${{ env.CC }}
        run: |
          go mod tidy && cd src && go build -v -ldflags "-extldflags '-static'" -o ../window-amd64-server.exe

      - name: Upload Windows binary
        uses: actions/upload-artifact@v3
        with:
          name: window-amd64-server.exe
          path: window-amd64-server.exe

  build-amd64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup QEMU for multi-arch emulation
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx (for multi-arch support)
        uses: docker/setup-buildx-action@v2

      - name: Build and run AMD64 golang container to compile
        run: |
          docker run --rm --platform linux/amd64 \
            -v "${{ github.workspace }}:/src" \
            -w /src \
            golang:1.24.2-alpine /bin/sh -c 'apk add --no-cache musl-dev gcc pkgconfig opus-dev && go mod tidy && cd src && CGO_CFLAGS="-I opus/include" CGO_LDFLAGS="-L opus/library/linux/amd64 -lopus -lm" CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-extldflags \"-static\"" -o ../linux-amd64-server -v'

      - name: Upload AMD64 binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-server
          path: linux-amd64-server
  build-arm64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup QEMU for multi-arch emulation
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx (for multi-arch support)
        uses: docker/setup-buildx-action@v2

      - name: Build and run ARM64 golang container to compile
        run: |
          docker run --rm --platform linux/arm64 \
            -v "${{ github.workspace }}:/src" \
            -w /src \
            golang:1.24.2-alpine /bin/sh -c 'apk add --no-cache musl-dev gcc pkgconfig opus-dev && go mod tidy && cd src && CGO_CFLAGS="-I opus/include" CGO_LDFLAGS="-L opus/library/linux/arm64 -lopus -lm" CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags="-extldflags \"-static\"" -o ../linux-arm64-server -v'

      - name: Upload ARM64 binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-server
          path: linux-arm64-server
